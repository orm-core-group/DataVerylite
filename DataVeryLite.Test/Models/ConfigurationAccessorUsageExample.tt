<#@ template language="c#" debug="true" hostspecific="true" #>
<#@ output extension="txt" #>
<#@ include file="ConfigurationAccessor.tt" #>
<#
    this.WriteLine("this.Host.ResolvePath() :"+this.Host.ResolvePath("Model.tt"));
    this.WriteLine("this.Host.TemplateFile :"+this.Host.TemplateFile);
	this.WriteLine("AppDomain.CurrentDomain.BaseDirectory :"+AppDomain.CurrentDomain.BaseDirectory);
#>

<#
	/// <summary>
	/// Demonstrates usage of ConfigurationAccessor.tt
	/// </summary>
	/// <author>Sky Sanders [sky.sanders@gmail.com, http://skysanders.net/subtext]</author>
	/// <date>01-23-10</date>
	/// <copyright>The contents of this file are a Public Domain Dedication.</copyright>
	/// 

	// instantiate ConfigurationAccessor
	var config = new ConfigurationAccessor((IServiceProvider)this.Host);
	

	// T4 TIP: work around the 'class feature' constrictions by using anonymous methods
	Action<string> header=new Action<string>((s)=>
	{
		this.WriteLine("");
		this.WriteLine("--------------------------------------------------------------");
		this.WriteLine(s);
		this.WriteLine("--------------------------------------------------------------");
	});
	header("Solution");
	var en1 = config.Solution.Properties.GetEnumerator();
	while(en1.MoveNext())
	{
		var property = (EnvDTE.Property)en1.Current;
		object propertyValue = null;
		try
		{
			propertyValue = property.Value;
		}
		catch (Exception ex)
		{
			propertyValue = ex.Message;
		}
		this.WriteLine("{0} = {1}",property.Name,propertyValue.ToString());
	}
	header("Projects");
	foreach (EnvDTE.Project proj in config.Solution.Projects)
	{
		this.WriteLine("{0} = {1}",proj.Name,proj.FullName);
		header(proj.Name);
		var en2 = proj.Properties.GetEnumerator();
		while(en2.MoveNext())
		{
			var property = (EnvDTE.Property)en2.Current;
			object propertyValue = null;
			try
			{
				propertyValue = property.Value;
			}
			catch (Exception ex)
			{
				propertyValue = ex.Message;
			}
			this.WriteLine("{0} = {1}",property.Name,propertyValue.ToString());
		}
	}

	// ----------------------------------------
    // Relevant ConfigurationAccessor Members
	// ----------------------------------------
	
	header("ConfigurationAccessor.Project");	
	//   Project provides access to the EnvDTE.Project that hosts this file. 
	//   see http://msdn.microsoft.com/en-us/library/envdte.project.aspx
	
	this.WriteLine("Project.FileName = {0}",config.CurrentProject.FileName);
	this.WriteLine("Project.FullName = {0}",config.CurrentProject.FullName);
	this.WriteLine("Project.Name = {0}",config.CurrentProject.Name);

	this.WriteLine("WebApplication.BrowseURL"+config.GetValueByCurrentProjectPropertyKey("WebApplication.BrowseURL"));
	header("ConfigurationAccessor.Properties");
	//   Properties is a convenience accessor to Project.Properties
	//   see http://msdn.microsoft.com/en-us/library/envdte.project_properties.aspx
	
	// enumerate all properties exposed by this project
	var en = config.CurrentProjectProperties.GetEnumerator();
	while(en.MoveNext())
	{
		var property = (EnvDTE.Property)en.Current;
		object propertyValue = null;
		try
		{
			propertyValue = property.Value;
		}
		catch (Exception ex)
		{
			propertyValue = ex.Message;
		}
		this.WriteLine("{0} = {1}",property.Name,propertyValue.ToString());
	}
	

		header("ConfigurationAccessor.Configuration");	
	//   Configuration provides access the app/web config.
	//   Use the methods on this member to gain access to arbitrary/custom configuration sections.	
	//   see http://msdn.microsoft.com/en-us/library/system.configuration.configuration.aspx
	
	var appSettingsSection = (AppSettingsSection)config.CurrentProjectConfiguration.GetSection("appSettings");
	//this.WriteLine(appSettingsSection.Settings["conStr"].Value);
	
	
	header("ConfigurationAccessor.AppSettings");
	//   AppSettings provides access to the AppSettings section.
	//   NOTE: you must explicitly access the Value property of the item.
	//   see http://msdn.microsoft.com/en-us/library/system.configuration.configuration.appsettings.aspx
	
	//this.WriteLine("\r\nString key access\r\nMyAppSetting = {0}\r\n",config.AppSettings["conStr"].Value);
	this.WriteLine("Enumerator access\r\n");
	en = config.CurrentProjectAppSettings.GetEnumerator();
	while(en.MoveNext())
	{
		var kv = (KeyValueConfigurationElement)en.Current;
		this.WriteLine("{0} = {1}",kv.Key,kv.Value);
	}
	
	
	header("ConfigurationAccessor.ConnectionStrings");
	//   ConnectionStrings behaves as expected.
	//   see http://msdn.microsoft.com/en-us/library/system.configuration.configuration.connectionstrings.aspx
	
	//this.WriteLine("\r\nString key access\r\nnorthwind = {0}\r\n",config.ConnectionStrings["conStr"].ConnectionString);
	
	this.WriteLine("Enumerator access\r\n");
	en = config.CurrentProjectConnectionStrings.GetEnumerator();
	while(en.MoveNext())
	{
		var cs = (ConnectionStringSettings)en.Current;
		this.WriteLine("{0}, {1}, {2}",cs.Name,cs.ProviderName,cs.ConnectionString);
	}
#>